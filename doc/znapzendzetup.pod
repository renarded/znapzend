=head1 NAME

znapzendzetup - znapzend setup utility

=head1 SYNOPSIS

B<znapzendzetup> I<command> [I<options...>]

where 'command' is one of the following:

    create  [--pfexec|sudo] \
            [--recursive] [--mbuffer=<path>[:<port>]] [--mbuffersize=<size>] \
            [--pre-snap-command=<command>] \
            [--post-snap-command=<command>] \
            [--pre-send-command=<command>|off] \
            [--post-send-command=<command>|off] \
            [--tsformat=<format>] --donotask \
            SRC plan dataset \
            [ DST[:key] plan [[user@]host:]dataset ]

    delete  [--pfexec|sudo] [--dst=key] <src_dataset>

    edit    [--pfexec|sudo]
            [--recursive=on|off] [--mbuffer=<path>[:<port>]|off] [--mbuffersize=<size>] \
            [--pre-snap-command=<command>|off] \
            [--post-snap-command=<command>|off] \
            [--pre-send-command=<command>|off] \
            [--post-send-command=<command>|off] \
            [--tsformat=<format>] --donotask \
            SRC [plan] dataset \
            [ DST:key [plan] [dataset] ]

    edit    [--pfexec|sudo] <src_dataset>

    enable  [--pfexec|sudo] <src_dataset>

    disable [--pfexec|sudo] <src_dataset>

    list    [--pfexec|sudo] [src_dataset]

    export  [--pfexec|sudo] <src_dataset>

    import  [--pfexec|sudo] [--write] [--prop <property>=<value>, [--prop ...] ...]
            <src_dataset> [<prop_dump_file>]

    help

    man

=head1 DESCRIPTION

Use znapzendsetup to configure your backup tasks. The cli is modled after
the zfs commandline.

After modifying the configuration, send a HUP signal to your znapzend daemon
for it to re-read the configuration.

Below a few notes on main commands.

=head2 B<create>

The heart of the znapzend backup is the plan. The plan specifies how often
to backup and for how long to keep the backups. A plan is required both for
the source and the destination datasets.

The plan consists of a series of retention periodes to interval
associations:

  retA=>intA,retB=>intB,...

Both intervals and retention periods are expressed in standard units of time
or multiples of them. You can use both the full name or a shortcut according
to the following table:

 second|sec|s
 minute|min
 hour|h
 day|d
 week|w
 month|mon|m
 year|y

To keep one copy every 30 minutes for one week, specify:

 1week=>30min

To keep one copy every two days for 10 years:

 10year=>2day

In a minimal setup, you just specify a plan for the B<SRC> fileset. This
will cause snapshots to be taken and destroyed according to the plan. You
can then add one or several destinations (B<DST>) both local (preferably on
a different pool) or remote.

When adding multiple B<DST> entries, each will get labled for later
identification, optionally you can specify your own label.

=over

=item B<--tsformat>=I<limited-strftime-format>

The B<--tsformat> option specifies how the names of the snapshots are
constructed.

The syntax is L<strftime>-like. The string must consist of the mandatory

 %Y %m %d %H %M %S

Optionally,

 - _ . :

characters as well as any alphanumeric character are allowed.

If not specified, B<--tsformat> defaults to C<%Y-%m-%d-%H%M%S>.

If B<--tsformat> string is suffixed by a 'Z', times will be in UTC. E.g.:

 --tsformat='%Y-%m-%dT%H:%M:%SZ'

NOTE: that windows will probably not like the C<:> characters. So if you
intend to browse the snapshots with windos, you may want to use a different
separator.

=item B<--mbuffer>=I</usr/bin/mbuffer>

Specify the path to your copy of the mbuffer utility.

=item B<--mbuffer>=I</usr/bin/mbuffer:31337>

Specifiy the path to your copy of the mbuffer utility and the port used
on the destination. Caution: znapzend will send the data directly
from source mbuffer to destination mbuffer, thus data stream is B<not>
encrypted.

=item B<--mbuffersize>=I<number>{B<b>|B<k>|B<M>|B<G>}

The size of the mbuffer can be set with the B<--mbuffersize> option.  It
supports the following units:

 b, k, M, G

To specify a mbuffer size of 100MB:

 --mbuffersize=100M

If not set, the buffer size defaults to 1GB.

=item B<--donotask>

Apply changes immediately. Without being asked if the config is as you
intended it to be.

=item B<--pre-snap-command>=I</path/bin args>, B<--post-snap-command>=I</path/bin args>

Run commands/scripts before and after snapshots are taken on source.
e.g. for database locking/flushing (pre) and unlocking (post).

=item B<--pre-send-command>=I</path/bin args>, B<--post-send-command>=I</path/bin args>

Run commands/scripts on source before and after snapshots are sent to destination. 

=back

=head2 B<delete>

to remove configuration from a dataset just give its name

 znapzendzetup delete I<dataset>

the B<delete> function understands the following options

=over

=item B<--dst>=I<key>

to only remove a destination, specify the key of the destionation. Use the
B<list> function to see the keys.

=back

=head2 B<edit>

modify the configuration of a dataset. see the descriptions in the B<create>
function for details.

If B<edit> is used with a source dataset as single argument, properties
can be edited in an editor.

=head2 B<export>

dumps the backup configuration of a dataset

 znapzendzetup export I<dataset>

=head2 B<import>

reads configuration data from a file or STDIN and prints it content

=over

=item B<--write>

actually store the new configuration into the dataset given on the
commandline.

=item B<--prop> I<key>="I<value>" [ B<--prop> ... ]

may be called multiple times to override properties in the imported config.

=back

=head1 EXAMPLES

create a complex backup task

    znapzendzetup create --recursive --mbuffer=/opt/omni/bin/mbuffer \
       --mbuffersize=1G --tsformat='%Y-%m-%d-%H%M%S' \
       --pre-snap-command="/bin/sh /usr/local/bin/lock_flush_db.sh" \
       --post-snap-command="/bin/sh /usr/local/bin/unlock_db.sh" \
       SRC '7d=>1h,30d=>4h,90d=>1d' tank/home \
       DST:a '7d=>1h,30d=>4h,90d=>1d,1y=>1w,10y=>1month' backup/home \
       DST:b '7d=>1h,30d=>4h,90d=>1d,1y=>1w,10y=>1month' root@bserv:backup/home

copy the setup from one fileset to another

    znapzendzetup export tank/home | znapzendzetup import --write tank/new_home

=head1 COPYRIGHT

Copyright (c) 2014 by OETIKER+PARTNER AG. All rights reserved.

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=head1 AUTHOR

S<Tobias Oetiker E<lt>tobi@oetiker.chE<gt>>
S<Dominik Hassler E<lt>hadfl@cpan.orgE<gt>>

=head1 HISTORY

2014-07-22 had Pre and post snapshot commands
2014-06-29 had Flexible snapshot time format
2014-06-01 had Multi destination backup
2014-05-30 had Initial Version

=cut
